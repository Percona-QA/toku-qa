<?xml version="1.0" ?>
<project name="generic ant script" default="default">
    <property environment="env"/>
    
    <property name="build.dir" location="obj/"/>
    <property name="src.dir" location="src/"/>
    
    <path id="project.classpath">
        <pathelement location="${build.dir}"/>
        <pathelement path="${java.class.path}"/>
    </path>
    
    <macrodef name="invoke-java">
        <attribute name="classname"/>
        <element name="javac" optional="true" implicit="true"/>
        <sequential>
            <java classname="@{classname}" fork="yes" failonerror="true">
                <jvmarg value="-server"/>
                <jvmarg value="-Xmx512m"/>
                <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError"/>
                <jvmarg value="-XX:HeapDumpPath=/tmp"/>
                <jvmarg value="-XX:-ReduceInitialCardMarks"/>
                <classpath refid="project.classpath"/>
                <assertions>
                    <disable/>
                </assertions>
                <javac/>
            </java>
        </sequential>
    </macrodef>
    
    <target name="default" depends="srccompile" description="Compile code."/>
    
    <target name="clean" description="Remove compilation artifacts">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${build.dir}" includes="**/*"/>
        </delete>
    </target>
    
    <target name="srccompile">
        <mkdir dir="${build.dir}"/>
        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="true" target="1.7" includeantruntime="false">
            <classpath refid="project.classpath"/>
        </javac>
    </target>
    
    <target name="execute" description="Run loader.">
        <fail unless="env.DB_NAME" message="DB_NAME not set."/>
        <fail unless="env.NUM_LOADER_THREADS" message="NUM_LOADER_THREADS not set."/>
        <fail unless="env.MAX_ROWS" message="NUM_DOCUMENTS_PER_COLLECTION not set."/>
        <fail unless="env.NUM_DOCUMENTS_PER_INSERT" message="NUM_DOCUMENTS_PER_INSERT not set."/>
        <fail unless="env.NUM_INSERTS_PER_FEEDBACK" message="NUM_INSERTS_PER_FEEDBACK not set."/>
        <fail unless="env.NUM_SECONDS_PER_FEEDBACK" message="NUM_SECONDS_PER_FEEDBACK not set."/>
        <fail unless="env.BENCHMARK_TSV" message="BENCHMARK_TSV not set."/>
        <fail unless="env.MONGO_COMPRESSION" message="MONGO_COMPRESSION not set."/>
        <fail unless="env.MONGO_BASEMENT" message="MONGO_BASEMENT not set."/>
        <fail unless="env.RUN_SECONDS" message="RUN_SECONDS not set."/>
        <fail unless="env.QUERIES_PER_INTERVAL" message="QUERIES_PER_INTERVAL not set."/>
        <fail unless="env.QUERY_INTERVAL_SECONDS" message="QUERY_INTERVAL_SECONDS not set."/>
        <fail unless="env.QUERY_LIMIT" message="QUERY_LIMIT not set."/>
        <fail unless="env.QUERY_NUM_DOCS_BEGIN" message="QUERY_NUM_DOCS_BEGIN not set."/>
        <fail unless="env.MAX_INSERTS_PER_SECOND" message="MAX_INSERTS_PER_SECOND not set."/>
        <fail unless="env.WRITE_CONCERN" message="WRITE_CONCERN not set."/>
        <fail unless="env.MONGO_SERVER" message="MONGO_SERVER not set."/>
        <fail unless="env.MONGO_PORT" message="MONGO_PORT not set."/>
        <fail unless="env.NUM_CHAR_FIELDS" message="NUM_CHAR_FIELDS not set."/>
        <fail unless="env.LENGTH_CHAR_FIELDS" message="LENGTH_CHAR_FIELDS not set."/>
        <fail unless="env.NUM_SECONDARY_INDEXES" message="NUM_SECONDARY_INDEXES not set."/>
        <fail unless="env.PERCENT_COMPRESSIBLE" message="PERCENT_COMPRESSIBLE not set."/>
        <fail unless="env.USE_PARTITIONING" message="USE_PARTITIONING not set."/>
        <fail unless="env.PARTITION_ROWS" message="PARTITION_ROWS not set."/>
        <fail unless="env.DELETE_AT_ROWS" message="DELETE_AT_ROWS not set."/>
        <fail unless="env.DELETE_PERCENTAGE" message="DELETE_PERCENTAGE not set."/>
        <fail unless="env.PERCENTAGE_OVER_ALLOWED" message="PERCENTAGE_OVER_ALLOWED not set."/>
        
        <invoke-java classname="jmongoiibench">
            <arg value="${env.DB_NAME}"/>                        <!-- database name -->
            <arg value="${env.NUM_LOADER_THREADS}"/>             <!-- number of writer threads -->
            <arg value="${env.MAX_ROWS}"/>                       <!-- documents to insert per collection -->
            <arg value="${env.NUM_DOCUMENTS_PER_INSERT}"/>       <!-- documents per insert (bulk loading)  -->
            <arg value="${env.NUM_INSERTS_PER_FEEDBACK}"/>       <!-- number of inserts between feedback/progress messages  -->
            <arg value="${env.NUM_SECONDS_PER_FEEDBACK}"/>       <!-- number of seconds between feedback/progress messages  -->
            <arg value="${env.BENCHMARK_TSV}"/>                  <!-- name of log file -->
            <arg value="${env.MONGO_COMPRESSION}"/>              <!-- compression type (if tokumx), valid values are lzma, quicklz, zlib, none -->
            <arg value="${env.MONGO_BASEMENT}"/>                 <!-- basement node size (if tokumx), 131072 = 128K -->
            <arg value="${env.RUN_SECONDS}"/>                    <!-- number of seconds to run for -->
            <arg value="${env.QUERIES_PER_INTERVAL}"/>           <!-- number of queries to run per given interval -->
            <arg value="${env.QUERY_INTERVAL_SECONDS}"/>         <!-- query interval (seconds) -->
            <arg value="${env.QUERY_LIMIT}"/>                    <!-- number of documents to return per query -->
            <arg value="${env.QUERY_NUM_DOCS_BEGIN}"/>           <!-- wait for this many documents to be inserted before starting queries -->
            <arg value="${env.MAX_INSERTS_PER_SECOND}"/>         <!-- maximum number of inserts per second -->
            <arg value="${env.WRITE_CONCERN}"/>                  <!-- write concern (FSYNC_SAFE, NONE, NORMAL, REPLICAS_SAFE, SAFE) -->
            <arg value="${env.MONGO_SERVER}"/>                   <!-- name for mongo server -->
            <arg value="${env.MONGO_PORT}"/>                     <!-- port for mongo server -->
            <arg value="${env.NUM_CHAR_FIELDS}"/>                <!-- number of additional character fields -->
            <arg value="${env.LENGTH_CHAR_FIELDS}"/>             <!-- length of each additional character field -->
            <arg value="${env.NUM_SECONDARY_INDEXES}"/>          <!-- number of secondary indexes (0 .. 3) -->
            <arg value="${env.PERCENT_COMPRESSIBLE}"/>           <!-- percentage of highly compressible data in additional character fields (0 .. 100) -->
            <arg value="${env.USE_PARTITIONING}"/>               <!-- use TokuMX partitioning (if TokuMX), if not standard deletes will occur -->
            <arg value="${env.PARTITION_ROWS}"/>                 <!-- # of rows to put in a partition (and delete unit of measure) -->
            <arg value="${env.DELETE_AT_ROWS}"/>                 <!-- # of rows at which to issue a partition drop or delete operation -->
            <arg value="${env.DELETE_PERCENTAGE}"/>              <!-- percentage of PARTITION_ROWS to delete if not partitioning -->
            <arg value="${env.PERCENTAGE_OVER_ALLOWED}"/>        <!-- percentage over DELETE_AT_ROWS that inserts will allow before waiting for cleanup -->
        </invoke-java>
    </target>

</project>
