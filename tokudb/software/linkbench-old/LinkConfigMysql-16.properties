#################################
#                               #
#   Data Source Configuration   #
#                               #
#################################

#   driver to use for the test - can only take one value
store = com.facebook.LinkBench.LinkStoreMysql

# mysql configuration
host = localhost
user = root
password = 
dbid = linkdb
port = 3306

###############################
#                             #
#   Benchmark Configuration   #
#                             #
###############################

tablename = linktable

# ignore counttable if not using mysql
counttable = counttable

debuglevel = 0

# number of threads to run during load phase
loaders = 100

# number of threads to run during request phase
requesters = 16

# id1 at which to start (inclusive)
startid1 = 1

# id1 at which to stop (exclusive);
# maxid1 =  25000000 = 20G
# maxid1 = 150000000 = ???G
maxid1 = 150000000

# if nonzero, generate id2 randomly between 0 and this - 1 during load
# and lookups. Caution - this needs to be <= max 32 bit integer in java
randomid2max = 0

# configuration for generating id2 in the request phase
# 0 means thread i generates id2 randomly without restriction;
# 1 means thread i generates id2 such that id2 % nrequesters = i,
#   this is to prevent threads from adding/deleting/updating same cells,
#   always use this configuration (1) when using HBaseGeneralAtomicityTesting;
id2gen_config = 0

# read + write requests per thread
requests = 20000

# max duration in seconds for the 2nd part of benchmark (1st part is load)
maxtime = 1800

# percentage split of requdests into addlink, deletelink, updatelink,
# getlink (point look-up), getlinklist (range look-up), countlinks.
# need to add up to 100
# Caution: countlink, getlink and getlinklist should be set to 0 when
#   using HBaseGeneralAtomictityTesting
# an exception will be thrown in case of failure to do so
addlink = 2.558399183
deletelink = 0.0117130139
updatelink = 0.1171878381
countlink = 68.2012445798
getlink = 0
getlinklist = 29.1114553852

# stats on timetaken displayed after this many seconds (min, max etc)
displayfreq = 1800

# if number of operations is > this, we store timetaken only for this many
# operations
maxsamples = 10000

# how many bytes to put in 'data' field
datasize = 100

# #links distribution function
# -1 means small id1s tend to get more #links : #links(id1) = maxid1/(1+id1)
# 0 means id1s that are multiples of nlinks_config get nlinks_config links
#   (rest get nlinks_default)
# 2 means perfect squares get more #links (rest get nlinks_default)
#   the larger a perfect square is, the more #links it gets
# 3 means perfect cubes get more #links
# 4-99 behave in a similar way
# 100 means exponential i.e powers of nlinks_config get more #links
nlinks_func = 2
#config param that goes along with nlinks_func
nlinks_config = 1
# use 0 or 1 for this
nlinks_default = 1

# read distribution function
# behaves in a similar way as nlinks_func documented above
read_function = 1
# config param to tune the above distribution function
read_config = 1

# write distribution function
# config param to tune the above distribution function
write_function = 1

# config param to tune the above distribution function
write_config = 1

