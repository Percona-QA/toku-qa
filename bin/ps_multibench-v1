#!/bin/bash
# Percona Server performance benchmark script with multiple storage engines
export SCRIPT_DIR=$(cd $(dirname $0) && pwd)
export dirIibench=$SCRIPT_DIR/../tokudb/software/iibench
dirSysbench=$SCRIPT_DIR/../tokudb/software/sysbench
dirTpcc=$SCRIPT_DIR/../tokudb/software/tpcc-percona
dirFbPileup=$SCRIPT_DIR/../tokudb/software/sysbench/fb-pileup

# Dispay script usage details
usage () {
  echo "Usage: [ options ]"
  echo "Options:"
  echo "  --workdir                  	       Specify work directory"
  echo "  --mysql-name                         Specify mysql server name. eg percona|mysql|mariadb"
  echo "  --mysql-version                      Specify mysql server version"
  echo "  --storage-engine                     Specify mysql server storage engine"
  echo "  --build-number                       Specify work build directory"
  echo "  --basedir                            Specify base directory name"
  echo "  --benchmark=[sysbench|iibench|all]   Specify benchmark name"
}

# Check if we have a functional getopt(1)
if ! getopt --test
  then
  go_out="$(getopt --options=edv --longoptions=workdir:,mysql-name:,mysql-version:,storage-engine:,build-number:,basedir:,benchmark:,help \
  --name="$(basename "$0")" -- "$@")"
  test $? -eq 0 || exit 1
  eval set -- "$go_out"
fi

if [[ $go_out == " --" ]];then
  usage
  exit 1
fi

for arg
do
  case "$arg" in
    -- ) shift; break;;
    --workdir )
    export BIG_DIR="$2"
    if [[ ! -d "$BIG_DIR" ]]; then
      echo "ERROR: Workdir ($BIG_DIR) directory does not exist. Terminating!"
      exit 1
    fi
    shift 2
    ;;
    --build-number )
    export BUILD_NUMBER="$2"
    shift 2
    ;;
    --mysql-name )
    export MYSQL_NAME="$2"
    shift 2
    ;;
    --mysql-version )
    export MYSQL_VERSION="$2"
    shift 2
    ;;
    --storage-engine )
    export MYSQL_STORAGE_ENGINE="$2"
    if [ "$MYSQL_STORAGE_ENGINE" != "innodb" ] && [ "$MYSQL_STORAGE_ENGINE" != "rocksdb" ] && [ "$MYSQL_STORAGE_ENGINE" != "tokudb" ]; then
      echo "ERROR: Invalid --storage-engine passed:"
      echo "  Please choose any of these storage engine options: innodb, rocksdb, tokudb"
      exit 1
    fi
    shift 2
    ;;
    --basedir )
    export BASEDIR="$2"
    shift 2
    ;;
    --benchmark )
    BENCHMARK="$2"
    shift 2
    if [ "$BENCHMARK" != "sysbench" ] && [ "$BENCHMARK" != "iibench" ] && [ "$BENCHMARK" != "dataload" ] && [ "$BENCHMARK" != "all" ]; then
      echo "ERROR: Invalid --benchmark passed:"
      echo "  Please choose any of these benchmark options: sysbench, iibench, dataload, all"
      exit 1
    fi
    ;;
    --help )
    usage
    exit 0
    ;;
  esac
done

# **********************************************************************************************
# generic variables
# **********************************************************************************************
if [[ -z "$BIG_DIR" ]]; then
  export BIG_DIR=${PWD}
fi
if [[ -z "$MYSQL_NAME" ]]; then
  export MYSQL_NAME="percona"
fi
if [[ -z "$MYSQL_VERSION" ]]; then
  export MYSQL_VERSION="5.x"
fi
if [[ -z "$MYSQL_STORAGE_ENGINE" ]]; then
  export MYSQL_STORAGE_ENGINE="innodb"
fi
if [[ -z "$BASEDIR" ]]; then
  echo "ERROR: You have not passed mysql base directory name. Terminating!"
  exit 1
else
  if [[ ! -d "$BIG_DIR/$BASEDIR" ]]; then
    echo "ERROR: MySQL base directory ($BIG_DIR/$BASEDIR) does not exist. Terminating!"
    exit 1
  fi
fi
if [[ -z "$BUILD_NUMBER" ]]; then
  export BUILD_NUMBER="100"
else
  mkdir -p $BIG_DIR/$BUILD_NUMBER
  cp -r $BIG_DIR/$BASEDIR $BIG_DIR/$BUILD_NUMBER
  export DB_DIR=$BIG_DIR/$BUILD_NUMBER/$BASEDIR
fi
if [[ -z "$BENCHMARK" ]]; then
  export BENCHMARK="all"
fi

export SCP_FILES=Y
export DIRECTIO=Y
export PATH=$PATH:$SCRIPT_DIR
export PS_MODE=0
export STARTUP_USER=$(whoami)
export MACHINE_NAME=$(echo ${HOSTNAME%%.*})

if [ ! -d ${BIG_DIR}/backups ]; then
  mkdir -p ${BIG_DIR}/backups
  export SCP_TARGET=${BIG_DIR}/backups
else
  export SCP_TARGET=${BIG_DIR}/backups
fi

#Check if MYEXTRA was set by Jenkins, otherwise this is presumably a local run
if [ ! -z ${MYEXTRA} ]; then
  export MYEXTRA=${MYEXTRA}
else
  export MYEXTRA=""
fi

if [[ "$MYSQL_STORAGE_ENGINE" == "rocksdb" ]];then
 MYEXTRA="--defaults-file=$SCRIPT_DIR/my_rocks.cnf $MYEXTRA"
else
 MYEXTRA="--defaults-file=$SCRIPT_DIR/my_inno.cnf $MYEXTRA"
fi

if [ -z $WORKSPACE ]; then
  echo "Assuming this is a local (i.e. non-Jenkins initiated) run."
  export WORKSPACE=$BIG_DIR/backups
fi

export WORKSPACE_LOC=$BIG_DIR/backups
export MYSQL_SOCKET=/tmp/ps-perf-mysql.sock

# ************************************************
# BE VERY CAREFUL TO SET STUFF AFTER THE FOLLOWING
# ************************************************

iibench_run(){
  # **********************************************************************************************
  # iibench
  # **********************************************************************************************
  export BENCH_SUITE=iibench
  export INNODB_CACHE=8G
  export TOKUDB_DIRECTIO_CACHE=8G
  export ROCKSDB_CACHE=8G
  export ADDITIONAL_WRITERS=0
  export MAX_ROWS=1000000
  export ROWS_PER_REPORT=200000
  export RUN_MINUTES=1200
  export UNIQUE_CHECKS=1
  export BENCH_ID=${MYSQL_STORAGE_ENGINE}
  export INSERT_ONLY=1
  export BENCHMARK_NUMBER=001
  export SHUTDOWN_MYSQL=N
  export IIBENCH_CREATE_TABLE=Y
  pushd ${dirIibench}
  ./ps.run.benchmark-v1.sh
  popd
  unset SHUTDOWN_MYSQL
  unset IIBENCH_CREATE_TABLE
      
  # **********************************************************************************************
  # iibench plus queries
  # **********************************************************************************************
  
  export BENCH_SUITE=iibench
  export INNODB_CACHE=8G
  export TOKUDB_DIRECTIO_CACHE=8G
  export ROCKSDB_CACHE=8G
  export ADDITIONAL_WRITERS=0
  export MAX_ROWS=1000000
  export ROWS_PER_REPORT=200000
  export RUN_MINUTES=1200
  export IIBENCH_MODE=QPS
  export UNIQUE_CHECKS=1
  export BENCH_ID=${MYSQL_STORAGE_ENGINE}.qps
  export INSERT_ONLY=0
  export BENCHMARK_NUMBER=002
  export SKIP_DB_CREATE=Y
  export IIBENCH_CREATE_TABLE=N
     
  pushd ${dirIibench}
  ./ps.run.benchmark-v1.sh
  popd
  unset SKIP_DB_CREATE
  unset IIBENCH_CREATE_TABLE
  unset IIBENCH_MODE
}

sysbench_run(){
  # **********************************************************************************************
  # sysbench
  # **********************************************************************************************
  # CPU bound performance run
  export BENCH_SUITE=sysbench
  export INNODB_CACHE=25G
  export TOKUDB_DIRECTIO_CACHE=25G
  export ROCKSDB_CACHE=25G
  export CGROUP_MEM=30G
  export NUM_TABLES=16
  export RUN_TIME_SECONDS=300
  export RAND_TYPE=uniform
  export BENCH_ID=${MYSQL_STORAGE_ENGINE}.5mm.${RAND_TYPE}.cpubound
  export NUM_ROWS=5000000
  export BENCH_SIZE=5M
  export BENCHMARK_NUMBER=003
  export threadCountList="0001 0004 0016 0064 0128 0256 0512 1024"
      
  pushd ${dirSysbench}
  ./ps.doit-v1.bash
  popd
  unset threadCountList
  
  # IO bound performance run
  export BENCH_SUITE=sysbench
  export INNODB_CACHE=15G
  export TOKUDB_DIRECTIO_CACHE=15G
  export ROCKSDB_CACHE=15G
  export CGROUP_MEM=20G
  export NUM_TABLES=16
  export RUN_TIME_SECONDS=300
  export RAND_TYPE=uniform
  export BENCH_ID=${MYSQL_STORAGE_ENGINE}.5mm.${RAND_TYPE}.iobound
  export NUM_ROWS=5000000
  export BENCH_SIZE=5M
  export BENCHMARK_NUMBER=004
  export threadCountList="0001 0004 0016 0064 0128 0256 0512 1024"
  
  pushd ${dirSysbench}
  ./ps.doit-v1.bash
  popd
  unset threadCountList
  
  # IO bound performance run
  export BENCH_SUITE=sysbench   
  export INNODB_CACHE=3G
  export TOKUDB_DIRECTIO_CACHE=3G
  export ROCKSDB_CACHE=3G
  export CGROUP_MEM=5G
  export NUM_TABLES=16
  export RUN_TIME_SECONDS=300
  export NUM_ROWS=1000000
  export BENCH_SIZE=1M
  export RAND_TYPE=uniform
  export BENCH_ID=${MYSQL_STORAGE_ENGINE}-1mm.${RAND_TYPE}.iobound
  export BENCHMARK_NUMBER=006
  export threadCountList="0001 0004 0016 0064 0128 0256 0512 1024"
      
      # < RAM
  pushd ${dirSysbench}
  ./ps.doit-v1.bash
  popd
  unset threadCountList
  
  # CPU bound performance run
  export BENCH_SUITE=sysbench
  export INNODB_CACHE=5G
  export TOKUDB_DIRECTIO_CACHE=5G
  export ROCKSDB_CACHE=5G
  export CGROUP_MEM=8G
  export NUM_ROWS=1000000
  export BENCH_SIZE=1M
  export RAND_TYPE=uniform
  export BENCH_ID=${MYSQL_STORAGE_ENGINE}-1mm.${RAND_TYPE}.cpubound
  export BENCHMARK_NUMBER=007
  export threadCountList="0001 0004 0016 0064 0128 0256 0512 1024"
  
      # < RAM
  pushd ${dirSysbench}
  ./ps.doit-v1.bash
  popd
  unset threadCountList
}   

dataload_run(){
  # **********************************************************************************************
  # sysbench
  # **********************************************************************************************
  # CPU bound performance run
  export BENCH_SUITE=dataload_run
  export INNODB_CACHE=10G
  export TOKUDB_DIRECTIO_CACHE=10G
  export ROCKSDB_CACHE=10G
  export CGROUP_MEM=15G
  export RAND_TYPE=uniform
  export BENCH_ID=${MYSQL_STORAGE_ENGINE}.dataload
  export NUM_ROWS=1000000
  export BENCHMARK_NUMBER=008
  export threadCountList="1 4 16 64 128 256 512 1024"
      
  ${SCRIPT_DIR}/ps.dataload.benchmark-v1.sh
  unset threadCountList
}   

if [[ "$BENCHMARK" == "all" ]] ; then
  echo "Initiated iibench/sysbench performance run"
  iibench_run
  sysbench_run
  dataload_run
elif [[ "$BENCHMARK" == "iibench" ]] ; then
  echo "Initiated iibench performance run"
  iibench_run
elif [[ "$BENCHMARK" == "sysbench" ]] ; then
  echo "Initiated sysbench performance run"
  sysbench_run
elif [[ "$BENCHMARK" == "dataload" ]] ; then
  echo "Initiated dataload performance run"
  dataload_run
fi
    #Generate graph
VERSION_INFO=`$DB_DIR/bin/mysqld --version | cut -d' ' -f2-`
UPTIME_HOUR=`uptime -p`
SYSTEM_LOAD=`uptime | sed 's|  | |g' | sed -e 's|.*user*.,|System|'`
MEM=`free -g | grep "Mem:" | awk '{print "Total:"$2"GB  Used:"$3"GB  Free:"$4"GB" }'`
if [ ! -f $WORKSPACE/hw.info ];then
  RELEASE=`cat /etc/redhat-release`
  KERNEL=`uname -r`
  echo "HW info | $RELEASE $KERNEL"  > $WORKSPACE/hw.info
fi
echo "Build #$BUILD_NUMBER | `date +'%d-%m-%Y | %H:%M'` | $VERSION_INFO | $UPTIME_HOUR | $SYSTEM_LOAD | Memory: $MEM " >> $WORKSPACE/build_info.log
$SCRIPT_DIR/../graph_template/ps_multibench_html_gen.sh    

